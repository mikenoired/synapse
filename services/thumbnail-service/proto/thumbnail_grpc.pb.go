// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/thumbnail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThumbnailService_GenerateImageThumbnail_FullMethodName = "/thumbnail.ThumbnailService/GenerateImageThumbnail"
	ThumbnailService_GenerateVideoThumbnail_FullMethodName = "/thumbnail.ThumbnailService/GenerateVideoThumbnail"
	ThumbnailService_GetImageDimensions_FullMethodName     = "/thumbnail.ThumbnailService/GetImageDimensions"
)

// ThumbnailServiceClient is the client API for ThumbnailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbnailServiceClient interface {
	GenerateImageThumbnail(ctx context.Context, in *ImageThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error)
	GenerateVideoThumbnail(ctx context.Context, in *VideoThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error)
	GetImageDimensions(ctx context.Context, in *ImageDimensionsRequest, opts ...grpc.CallOption) (*ImageDimensionsResponse, error)
}

type thumbnailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbnailServiceClient(cc grpc.ClientConnInterface) ThumbnailServiceClient {
	return &thumbnailServiceClient{cc}
}

func (c *thumbnailServiceClient) GenerateImageThumbnail(ctx context.Context, in *ImageThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbnailResponse)
	err := c.cc.Invoke(ctx, ThumbnailService_GenerateImageThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbnailServiceClient) GenerateVideoThumbnail(ctx context.Context, in *VideoThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbnailResponse)
	err := c.cc.Invoke(ctx, ThumbnailService_GenerateVideoThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbnailServiceClient) GetImageDimensions(ctx context.Context, in *ImageDimensionsRequest, opts ...grpc.CallOption) (*ImageDimensionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageDimensionsResponse)
	err := c.cc.Invoke(ctx, ThumbnailService_GetImageDimensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThumbnailServiceServer is the server API for ThumbnailService service.
// All implementations must embed UnimplementedThumbnailServiceServer
// for forward compatibility.
type ThumbnailServiceServer interface {
	GenerateImageThumbnail(context.Context, *ImageThumbnailRequest) (*ThumbnailResponse, error)
	GenerateVideoThumbnail(context.Context, *VideoThumbnailRequest) (*ThumbnailResponse, error)
	GetImageDimensions(context.Context, *ImageDimensionsRequest) (*ImageDimensionsResponse, error)
	mustEmbedUnimplementedThumbnailServiceServer()
}

// UnimplementedThumbnailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThumbnailServiceServer struct{}

func (UnimplementedThumbnailServiceServer) GenerateImageThumbnail(context.Context, *ImageThumbnailRequest) (*ThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImageThumbnail not implemented")
}
func (UnimplementedThumbnailServiceServer) GenerateVideoThumbnail(context.Context, *VideoThumbnailRequest) (*ThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVideoThumbnail not implemented")
}
func (UnimplementedThumbnailServiceServer) GetImageDimensions(context.Context, *ImageDimensionsRequest) (*ImageDimensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageDimensions not implemented")
}
func (UnimplementedThumbnailServiceServer) mustEmbedUnimplementedThumbnailServiceServer() {}
func (UnimplementedThumbnailServiceServer) testEmbeddedByValue()                          {}

// UnsafeThumbnailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbnailServiceServer will
// result in compilation errors.
type UnsafeThumbnailServiceServer interface {
	mustEmbedUnimplementedThumbnailServiceServer()
}

func RegisterThumbnailServiceServer(s grpc.ServiceRegistrar, srv ThumbnailServiceServer) {
	// If the following call pancis, it indicates UnimplementedThumbnailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThumbnailService_ServiceDesc, srv)
}

func _ThumbnailService_GenerateImageThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailServiceServer).GenerateImageThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbnailService_GenerateImageThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailServiceServer).GenerateImageThumbnail(ctx, req.(*ImageThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbnailService_GenerateVideoThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailServiceServer).GenerateVideoThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbnailService_GenerateVideoThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailServiceServer).GenerateVideoThumbnail(ctx, req.(*VideoThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbnailService_GetImageDimensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageDimensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailServiceServer).GetImageDimensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbnailService_GetImageDimensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailServiceServer).GetImageDimensions(ctx, req.(*ImageDimensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThumbnailService_ServiceDesc is the grpc.ServiceDesc for ThumbnailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThumbnailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thumbnail.ThumbnailService",
	HandlerType: (*ThumbnailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateImageThumbnail",
			Handler:    _ThumbnailService_GenerateImageThumbnail_Handler,
		},
		{
			MethodName: "GenerateVideoThumbnail",
			Handler:    _ThumbnailService_GenerateVideoThumbnail_Handler,
		},
		{
			MethodName: "GetImageDimensions",
			Handler:    _ThumbnailService_GetImageDimensions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/thumbnail.proto",
}
